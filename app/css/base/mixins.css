@import './defaults';

@define-mixin break $breakpoint, $maximum: nil {
  @if $maximum == nil {
    @media screen and (min-width: $(breakpoint)px) {
      @mixin-content;
    }
  } @else {
    @media screen and (min-width: $(breakpoint)px) and (max-width: $(maximum)px) {
      @mixin-content;
    }
  }
}

@define-mixin vh $prop: height, $percent: 0 {
  $(prop): $(percent)vh;

  /**
   * Fix for iPad, portrait
   */
  @media all and (device-width: 768px) and (device-height: 1024px) and (orientation:portrait) {
    $(prop): calc($percent * 1024px);
  }

  /**
   * Fix for iPad, landscape
   */
  @media all and (device-width: 768px) and (device-height: 1024px) and (orientation:landscape) {
    $(prop): calc($percent * 768px);
  }

  /**
   * Fix for iPhone 5
   */
  @media screen and (device-aspect-ratio: 40/71) and (device-height: 500px) {
    $(prop): calc($percent * 500px);
  }
}

@define-mixin pseudo $position: before, $width: 100%, $height: 100% {
  position: relative;

  &::$(position) {
    position: absolute;
    width: $width;
    height: $height;
    content: '';
    @mixin-content;
  }
}

@define-mixin round-border $width: 1px, $radius: 2px, $style: solid {
  border-width: $width;
  border-radius: $radius;
  border-style: $style;
}

@define-mixin flex-block $flow: row, $justify: center, $align: center {
  display: block;
  display: flex;
  flex-flow: $flow;
  justify-content: $justify;
  align-items: $align;
}

@define-mixin decolorize $property: background, $value: inherit {
  @each $color in (ninja, dinosaur, lumberjack, bluejeans, royalty, bacon, lava, hunter, pirate, blacksmith) {
    $(property): $(value);
    :global .colorize.$(color) :local & {
      $(property): $(value);
    }
  }
}

@define-mixin colorize $property: background, $function, $secondFunction {
  @each $color in (ninja, dinosaur, lumberjack, bluejeans, royalty, bacon, lava, hunter, pirate, blacksmith) {
    $(property): color(var(--primary) $(function) $(secondFunction));
    :global .colorize.$(color) :local & {
      $(property): color(var(--$(color)) $(function) $(secondFunction));
    }
  }
}

@define-mixin react-transition $stage {
  @if $stage == will-mount {
    &[class$=-appear] { @mixin-content; }
  } @else if $stage == did-mount {
    &[class$=-appear-active] { @mixin-content; }
  } @else if $stage == will-enter {
    &[class$=-enter] { @mixin-content; }
  } @else if $stage == did-enter {
    &[class$=-enter-active] { @mixin-content; }
  } @else if $stage == will-leave {
    &[class$=-leave] { @mixin-content; }
  } @else if $stage == did-leave {
    &[class$=-leave-active] { @mixin-content; }
  } @else {
    &[class$=-$(stage)] { @mixin-content; }
  }
}
